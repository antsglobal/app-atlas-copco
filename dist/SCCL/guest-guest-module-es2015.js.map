{"version":3,"sources":["./src/app/guest/guest.module.ts","./src/app/guest/login/login.component.ts","./src/app/guest/login/login.component.html","./src/app/guest/guest.component.ts","./src/app/guest/guest.component.html","./src/app/guest/guest-routing.module.ts","./src/app/services/user.service.ts"],"names":[],"mappings":"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","file":"guest-guest-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GuestRoutingModule } from './guest-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { GuestComponent } from './guest.component';\nimport { MaterialModule } from '../material.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\n\n@NgModule({\n  declarations: [LoginComponent, GuestComponent],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    FormsModule,\n    GuestRoutingModule\n  ]\n})\nexport class GuestModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UserModel } from 'src/app/models/usermodel';\nimport { UserService } from '../../services/user.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  inputUserName: string;\n  inputPassword: string;\n\n  constructor(private router: Router, public dialog: MatDialog, private snackBar: MatSnackBar, private userService: UserService) { }\n\n  ngOnInit(): void {\n  }\n  email = new FormControl('', [Validators.required, Validators.email]);\n  password = new FormControl('', [Validators.required]);\n\n  getEmailErrorMessage() {\n    if (this.email.hasError('required')) {\n      return 'Email Id is requried';\n    }\n    return this.email.hasError('email') ? 'Invalid Email Id' : '';\n  }\n  getPasswordErrorMessage() {\n    if (this.email.hasError('required')) {\n      return 'Password is requried';\n    }\n  }\n\n  login() {\n    console.log(this.email.status, this.password.status);\n    if (this.email.status == 'VALID' && this.password.status == 'VALID') {\n\n      const loginDetails: UserModel = {\n        userEmail: this.inputUserName,\n        userPassword: this.inputPassword\n      } as UserModel;\n\n      this.userService.login(loginDetails).toPromise().then(response => {\n        if (response) {\n          console.log(response, response['status'], response['message'].toLowerCase())\n          if (response['status'] == 'true' && response['message'].toLowerCase() == 'login succes') {\n            let data = response['data'];\n            sessionStorage.setItem(\"loggedInemployeeId\", data.userId);\n            sessionStorage.setItem(\"loggedInemployeeEmail\", data.userEmail);\n            sessionStorage.setItem(\"loggedInemployeeName\", data.userName);\n            if (data.userName == \"Demo\") {\n              this.router.navigate(['/assets/assetsummary']);\n            }\n            else {\n              this.router.navigate(['/assets/dashboard']);\n            }\n\n          }\n        }\n      }, (error) => {\n        let message = \"Please provide valid credentials to login.\"\n        if (error.error && error.error['message']) {\n          message = error.error['message']\n        }\n        this.snackBar.open(message, 'Ok', {\n          horizontalPosition: 'center',\n          verticalPosition: 'top',\n          panelClass: 'status-message'\n        });\n      })\n    }\n  }\n}\n","<div class=\"row login-bg bg-regular h-100 m-0 p-0\">\n  <div class=\"show-medium col-sm-9 h-100\">\n    <img src=\"../../../assets/images/at-logo-hor.png\" class=\"anex-small\">\n\n    <div class=\"welcome-box\">\n      <h5 class=\"welcome-text pt-5 p-2\"> Welcome to</h5>\n      <h3 class=\"welcome-main pt-4 p-2\"><span class=\"name-color\">Alpha-Numero</span> Asset Management System</h3>\n      <p class=\"welcome-subtext p-2\">We help people track, manage and support their assets throughout their life cycle\n      </p>\n    </div>\n\n\n  </div>\n  <div class=\"row m-0 p-2 col-xsm-12 col-sm-3 h-100 login-background align-content-center\">\n    <div class=\"card border-0 login-background\">\n      <div class=\"text-center login-background\">\n        <img src=\"../../assets/images/favicon.png\" width=\"30%\" />\n      </div>\n\n      <div class=\"card-body login-background\">\n        <form>\n          <mat-form-field appearance=\"outline\" class=\"w-100 m-1\" color=\"accent\">\n            <mat-label>Email Id</mat-label>\n            <input matInput [formControl]=\"email\" [(ngModel)]=\"inputUserName\" required>\n            <mat-error color=\"warn\" *ngIf=\"email.invalid\">{{getEmailErrorMessage()}}</mat-error>\n          </mat-form-field>\n          <mat-form-field appearance=\"outline\" class=\"w-100 m-1\" color=\"accent\">\n            <mat-label>Password</mat-label>\n            <input matInput [formControl]=\"password\" type=\"password\" [(ngModel)]=\"inputPassword\" required>\n            <mat-error color=\"warn\" *ngIf=\"password.invalid\">{{getPasswordErrorMessage()}}</mat-error>\n          </mat-form-field>\n          <mat-checkbox color=\"primary\" class=\"w-100 m-1\">Remember Me!</mat-checkbox>\n          <button mat-raised-button color=\"primary\" class=\"btn btn-block w-100 m-2\" type=\"submit\"\n            (click)=\"login();\">Login</button>\n          <button mat-button class=\"btn btn-link btn-block w-100 m-2\" type=\"button\">Forgot Password</button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-guest',\n  templateUrl: './guest.component.html',\n  styleUrls: ['./guest.component.css']\n})\nexport class GuestComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { GuestComponent } from './guest.component';\r\nimport { LoginComponent } from './login/login.component';\r\n\nconst routes: Routes = [\n  {\r\n    path: '',\n    component: GuestComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'login',\r\n        pathMatch:'full'\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent\r\n      }\r\n    ]\r\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GuestRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ServiceConstants } from '../constants/ServiceConstants';\nimport { UserModel } from '../models/usermodel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  private assetLoginApiUrl = ServiceConstants.baseurlv1 + '/login';\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials: UserModel): Observable<string> {\n    return this.http.post<string>(this.assetLoginApiUrl, credentials);\n  }\n}\n"],"sourceRoot":"webpack:///"}