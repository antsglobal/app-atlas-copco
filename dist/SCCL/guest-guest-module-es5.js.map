{"version":3,"sources":["webpack:///src/app/guest/guest.module.ts","webpack:///src/app/guest/login/login.component.ts","webpack:///src/app/guest/login/login.component.html","webpack:///src/app/guest/guest.component.ts","webpack:///src/app/guest/guest.component.html","webpack:///src/app/guest/guest-routing.module.ts","webpack:///src/app/services/user.service.ts"],"names":["GuestModule","declarations","imports","LoginComponent","router","dialog","snackBar","userService","email","required","password","hasError","console","log","status","loginDetails","userEmail","inputUserName","userPassword","inputPassword","login","toPromise","then","response","toLowerCase","data","sessionStorage","setItem","userId","userName","navigate","error","message","open","horizontalPosition","verticalPosition","panelClass","selector","templateUrl","styleUrls","GuestComponent","routes","path","component","children","redirectTo","pathMatch","GuestRoutingModule","forChild","exports","UserService","http","httpOptions","headers","assetLoginApiUrl","baseurlv1","credentials","post","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAoBaA,W;;;;;cAAAA;;;;2BAAAA,W;AAAW,S;AAAA,kBARb,CACP,4DADO,EAEP,+DAFO,EAGP,kEAHO,EAIP,0DAJO,EAKP,wEALO,CAQa;;;;4HAAXA,W,EAAW;AAAA,yBATP,qEASO,EATS,+DAST;AATuB,oBAE3C,4DAF2C,EAG3C,+DAH2C,EAI3C,kEAJ2C,EAK3C,0DAL2C,EAM3C,wEAN2C;AASvB,S;AAHF,O;;;;;wEAGTA,W,EAAW;gBAVvB,sDAUuB;iBAVd;AACRC,wBAAY,EAAE,CAAC,qEAAD,EAAiB,+DAAjB,CADN;AAERC,mBAAO,EAAE,CACP,4DADO,EAEP,+DAFO,EAGP,kEAHO,EAIP,0DAJO,EAKP,wEALO;AAFD,W;AAUc,U;;;;;;;;;;;;;;;;;;ACpBxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACwBY;;AAA8C;;AAA0B;;;;;;AAA1B;;AAAA;;;;;;AAK9C;;AAAiD;;AAA6B;;;;;;AAA7B;;AAAA;;;;UDhBhDC,c;AAIX,gCAAoBC,MAApB,EAA2CC,MAA3C,EAAsEC,QAAtE,EAAqGC,WAArG,EAA+H;AAAA;;AAA3G,eAAAH,MAAA,GAAAA,MAAA;AAAuB,eAAAC,MAAA,GAAAA,MAAA;AAA2B,eAAAC,QAAA,GAAAA,QAAA;AAA+B,eAAAC,WAAA,GAAAA,WAAA;AAIrG,eAAAC,KAAA,GAAQ,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAApB,CAAR;AACA,eAAAE,QAAA,GAAW,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CAAC,0DAAWD,QAAZ,CAApB,CAAX;AALkI;;;;qCAE1H,CACP;;;iDAIsB;AACrB,gBAAI,KAAKD,KAAL,CAAWG,QAAX,CAAoB,UAApB,CAAJ,EAAqC;AACnC,qBAAO,sBAAP;AACD;;AACD,mBAAO,KAAKH,KAAL,CAAWG,QAAX,CAAoB,OAApB,IAA+B,kBAA/B,GAAoD,EAA3D;AACD;;;oDACyB;AACxB,gBAAI,KAAKH,KAAL,CAAWG,QAAX,CAAoB,UAApB,CAAJ,EAAqC;AACnC,qBAAO,sBAAP;AACD;AACF;;;kCAEO;AAAA;;AACNC,mBAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWM,MAAvB,EAA+B,KAAKJ,QAAL,CAAcI,MAA7C;;AACA,gBAAI,KAAKN,KAAL,CAAWM,MAAX,IAAqB,OAArB,IAAgC,KAAKJ,QAAL,CAAcI,MAAd,IAAwB,OAA5D,EAAqE;AAEnE,kBAAMC,YAAY,GAAc;AAC9BC,yBAAS,EAAE,KAAKC,aADc;AAE9BC,4BAAY,EAAE,KAAKC;AAFW,eAAhC;AAKA,mBAAKZ,WAAL,CAAiBa,KAAjB,CAAuBL,YAAvB,EAAqCM,SAArC,GAAiDC,IAAjD,CAAsD,UAAAC,QAAQ,EAAI;AAChE,oBAAIA,QAAJ,EAAc;AACZX,yBAAO,CAACC,GAAR,CAAYU,QAAZ,EAAsBA,QAAQ,CAAC,QAAD,CAA9B,EAA0CA,QAAQ,CAAC,SAAD,CAAR,CAAoBC,WAApB,EAA1C;;AACA,sBAAID,QAAQ,CAAC,QAAD,CAAR,IAAsB,MAAtB,IAAgCA,QAAQ,CAAC,SAAD,CAAR,CAAoBC,WAApB,MAAqC,cAAzE,EAAyF;AACvF,wBAAIC,IAAI,GAAGF,QAAQ,CAAC,MAAD,CAAnB;AACAG,kCAAc,CAACC,OAAf,CAAuB,oBAAvB,EAA6CF,IAAI,CAACG,MAAlD;AACAF,kCAAc,CAACC,OAAf,CAAuB,uBAAvB,EAAgDF,IAAI,CAACT,SAArD;AACAU,kCAAc,CAACC,OAAf,CAAuB,sBAAvB,EAA+CF,IAAI,CAACI,QAApD;;AACA,wBAAIJ,IAAI,CAACI,QAAL,IAAiB,MAArB,EAA6B;AAC3B,2BAAI,CAACzB,MAAL,CAAY0B,QAAZ,CAAqB,CAAC,sBAAD,CAArB;AACD,qBAFD,MAGK;AACH,2BAAI,CAAC1B,MAAL,CAAY0B,QAAZ,CAAqB,CAAC,mBAAD,CAArB;AACD;AAEF;AACF;AACF,eAjBD,EAiBG,UAACC,KAAD,EAAW;AACZ,oBAAIC,OAAO,GAAG,4CAAd;;AACA,oBAAID,KAAK,CAACA,KAAN,IAAeA,KAAK,CAACA,KAAN,CAAY,SAAZ,CAAnB,EAA2C;AACzCC,yBAAO,GAAGD,KAAK,CAACA,KAAN,CAAY,SAAZ,CAAV;AACD;;AACD,qBAAI,CAACzB,QAAL,CAAc2B,IAAd,CAAmBD,OAAnB,EAA4B,IAA5B,EAAkC;AAChCE,oCAAkB,EAAE,QADY;AAEhCC,kCAAgB,EAAE,KAFc;AAGhCC,4BAAU,EAAE;AAHoB,iBAAlC;AAKD,eA3BD;AA4BD;AACF;;;;;;;yBA7DUjC,c,EAAc,uH,EAAA,mI,EAAA,wI,EAAA,mI;AAAA,O;;;cAAdA,c;AAAc,kC;AAAA,iB;AAAA,e;AAAA,ooC;AAAA;AAAA;ACb3B;;AACE;;AACE;;AAEA;;AACE;;AAAmC;;AAAU;;AAC7C;;AAAkC;;AAAyB;;AAAY;;AAAQ;;AAAuB;;AACtG;;AAA+B;;AAC/B;;AACF;;AAGF;;AACA;;AACE;;AACE;;AACE;;AACF;;AAEA;;AACE;;AACE;;AACE;;AAAW;;AAAQ;;AACnB;;AAAsC;AAAA;AAAA;;AAAtC;;AACA;;AACF;;AACA;;AACE;;AAAW;;AAAQ;;AACnB;;AAAyD;AAAA;AAAA;;AAAzD;;AACA;;AACF;;AACA;;AAAgD;;AAAY;;AAC5D;;AACE;AAAA,qBAAS,IAAAiB,KAAA,EAAT;AAAgB,aAAhB;;AAAmB;;AAAK;;AAC1B;;AAA0E;;AAAe;;AAC3F;;AACF;;AACF;;AACF;;AACF;;;;AAhB4B;;AAAA,+FAAqB,SAArB,EAAqB,iBAArB;;AACS;;AAAA;;AAIT;;AAAA,kGAAwB,SAAxB,EAAwB,iBAAxB;;AACS;;AAAA;;;;;;;;;wEDhBxBjB,c,EAAc;gBAL1B,uDAK0B;iBALhB;AACTkC,oBAAQ,EAAE,WADD;AAETC,uBAAW,EAAE,wBAFJ;AAGTC,qBAAS,EAAE,CAAC,uBAAD;AAHF,W;AAKgB,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEb3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOaC,c;AAEX,kCAAc;AAAA;AAAG;;;;qCAET,CACP;;;;;;;yBALUA,c;AAAc,O;;;cAAdA,c;AAAc,kC;AAAA,gB;AAAA,e;AAAA;AAAA;ACP3B;;;;;;;;;wEDOaA,c,EAAc;gBAL1B,uDAK0B;iBALhB;AACTH,oBAAQ,EAAE,WADD;AAETC,uBAAW,EAAE,wBAFJ;AAGTC,qBAAS,EAAE,CAAC,uBAAD;AAHF,W;AAKgB,U;;;;;;;;;;;;;;;;;;;;AEP3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,UAAME,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE,+DAFb;AAGEC,gBAAQ,EAAE,CACR;AACEF,cAAI,EAAE,EADR;AAEEG,oBAAU,EAAE,OAFd;AAGEC,mBAAS,EAAC;AAHZ,SADQ,EAMR;AACEJ,cAAI,EAAE,OADR;AAEEC,mBAAS,EAAE;AAFb,SANQ;AAHZ,OADqB,CAAvB;;UAsBaI,kB;;;;;cAAAA;;;;2BAAAA,kB;AAAkB,S;AAAA,kBAHpB,CAAC,6DAAaC,QAAb,CAAsBP,MAAtB,CAAD,CAGoB,EAFnB,4DAEmB;;;;4HAAlBM,kB,EAAkB;AAAA;AAAA,oBAFnB,4DAEmB;AAAA,S;AAFP,O;;;;;wEAEXA,kB,EAAkB;gBAJ9B,sDAI8B;iBAJrB;AACR7C,mBAAO,EAAE,CAAC,6DAAa8C,QAAb,CAAsBP,MAAtB,CAAD,CADD;AAERQ,mBAAO,EAAE,CAAC,4DAAD;AAFD,W;AAIqB,U;;;;;;;;;;;;;;;;;;AC3B/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAUaC,W;AAWX,6BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,eAAAA,IAAA,GAAAA,IAAA;AATpB,eAAAC,WAAA,GAAc;AACZC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,6CAA+B,GADR;AAEvB,8BAAgB;AAFO,aAAhB;AADG,WAAd;AAOQ,eAAAC,gBAAA,GAAmB,6EAAiBC,SAAjB,GAA6B,QAAhD;AAEiC;;;;gCAEnCC,W,EAAsB;AAC1B,mBAAO,KAAKL,IAAL,CAAUM,IAAV,CAAuB,KAAKH,gBAA5B,EAA8CE,WAA9C,CAAP;AACD;;;;;;;yBAfUN,W,EAAW,uH;AAAA,O;;;eAAXA,W;AAAW,iBAAXA,WAAW,K;AAAA,oBAFV;;;;;wEAEDA,W,EAAW;gBAHvB,wDAGuB;iBAHZ;AACVQ,sBAAU,EAAE;AADF,W;AAGY,U","file":"guest-guest-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GuestRoutingModule } from './guest-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { GuestComponent } from './guest.component';\nimport { MaterialModule } from '../material.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\n\n@NgModule({\n  declarations: [LoginComponent, GuestComponent],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    FormsModule,\n    GuestRoutingModule\n  ]\n})\nexport class GuestModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UserModel } from 'src/app/models/usermodel';\nimport { UserService } from '../../services/user.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  inputUserName: string;\n  inputPassword: string;\n\n  constructor(private router: Router, public dialog: MatDialog, private snackBar: MatSnackBar, private userService: UserService) { }\n\n  ngOnInit(): void {\n  }\n  email = new FormControl('', [Validators.required, Validators.email]);\n  password = new FormControl('', [Validators.required]);\n\n  getEmailErrorMessage() {\n    if (this.email.hasError('required')) {\n      return 'Email Id is requried';\n    }\n    return this.email.hasError('email') ? 'Invalid Email Id' : '';\n  }\n  getPasswordErrorMessage() {\n    if (this.email.hasError('required')) {\n      return 'Password is requried';\n    }\n  }\n\n  login() {\n    console.log(this.email.status, this.password.status);\n    if (this.email.status == 'VALID' && this.password.status == 'VALID') {\n\n      const loginDetails: UserModel = {\n        userEmail: this.inputUserName,\n        userPassword: this.inputPassword\n      } as UserModel;\n\n      this.userService.login(loginDetails).toPromise().then(response => {\n        if (response) {\n          console.log(response, response['status'], response['message'].toLowerCase())\n          if (response['status'] == 'true' && response['message'].toLowerCase() == 'login succes') {\n            let data = response['data'];\n            sessionStorage.setItem(\"loggedInemployeeId\", data.userId);\n            sessionStorage.setItem(\"loggedInemployeeEmail\", data.userEmail);\n            sessionStorage.setItem(\"loggedInemployeeName\", data.userName);\n            if (data.userName == \"Demo\") {\n              this.router.navigate(['/assets/assetsummary']);\n            }\n            else {\n              this.router.navigate(['/assets/dashboard']);\n            }\n\n          }\n        }\n      }, (error) => {\n        let message = \"Please provide valid credentials to login.\"\n        if (error.error && error.error['message']) {\n          message = error.error['message']\n        }\n        this.snackBar.open(message, 'Ok', {\n          horizontalPosition: 'center',\n          verticalPosition: 'top',\n          panelClass: 'status-message'\n        });\n      })\n    }\n  }\n}\n","<div class=\"row login-bg bg-regular h-100 m-0 p-0\">\n  <div class=\"show-medium col-sm-9 h-100\">\n    <img src=\"../../../assets/images/at-logo-hor.png\" class=\"anex-small\">\n\n    <div class=\"welcome-box\">\n      <h5 class=\"welcome-text pt-5 p-2\"> Welcome to</h5>\n      <h3 class=\"welcome-main pt-4 p-2\"><span class=\"name-color\">Alpha-Numero</span> Asset Management System</h3>\n      <p class=\"welcome-subtext p-2\">We help people track, manage and support their assets throughout their life cycle\n      </p>\n    </div>\n\n\n  </div>\n  <div class=\"row m-0 p-2 col-xsm-12 col-sm-3 h-100 login-background align-content-center\">\n    <div class=\"card border-0 login-background\">\n      <div class=\"text-center login-background\">\n        <img src=\"../../assets/images/favicon.png\" width=\"30%\" />\n      </div>\n\n      <div class=\"card-body login-background\">\n        <form>\n          <mat-form-field appearance=\"outline\" class=\"w-100 m-1\" color=\"accent\">\n            <mat-label>Email Id</mat-label>\n            <input matInput [formControl]=\"email\" [(ngModel)]=\"inputUserName\" required>\n            <mat-error color=\"warn\" *ngIf=\"email.invalid\">{{getEmailErrorMessage()}}</mat-error>\n          </mat-form-field>\n          <mat-form-field appearance=\"outline\" class=\"w-100 m-1\" color=\"accent\">\n            <mat-label>Password</mat-label>\n            <input matInput [formControl]=\"password\" type=\"password\" [(ngModel)]=\"inputPassword\" required>\n            <mat-error color=\"warn\" *ngIf=\"password.invalid\">{{getPasswordErrorMessage()}}</mat-error>\n          </mat-form-field>\n          <mat-checkbox color=\"primary\" class=\"w-100 m-1\">Remember Me!</mat-checkbox>\n          <button mat-raised-button color=\"primary\" class=\"btn btn-block w-100 m-2\" type=\"submit\"\n            (click)=\"login();\">Login</button>\n          <button mat-button class=\"btn btn-link btn-block w-100 m-2\" type=\"button\">Forgot Password</button>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-guest',\n  templateUrl: './guest.component.html',\n  styleUrls: ['./guest.component.css']\n})\nexport class GuestComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { GuestComponent } from './guest.component';\r\nimport { LoginComponent } from './login/login.component';\r\n\nconst routes: Routes = [\n  {\r\n    path: '',\n    component: GuestComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'login',\r\n        pathMatch:'full'\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: LoginComponent\r\n      }\r\n    ]\r\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GuestRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ServiceConstants } from '../constants/ServiceConstants';\nimport { UserModel } from '../models/usermodel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  private assetLoginApiUrl = ServiceConstants.baseurlv1 + '/login';\n\n  constructor(private http: HttpClient) { }\n\n  login(credentials: UserModel): Observable<string> {\n    return this.http.post<string>(this.assetLoginApiUrl, credentials);\n  }\n}\n"]}